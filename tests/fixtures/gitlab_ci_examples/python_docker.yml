# Python application with Docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_REF_SLUG

stages:
  - test
  - build
  - deploy

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Test stage
test:lint:
  stage: test
  image: python:3.9
  before_script:
    - pip install -r requirements-dev.txt
  script:
    - flake8 src/
    - black --check src/
    - isort --check-only src/

test:unit:
  stage: test
  image: python:3.9
  services:
    - name: postgres:13
      alias: postgres
      variables:
        POSTGRES_DB: test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_pass
    - redis:6-alpine
  variables:
    DATABASE_URL: "postgresql://test_user:test_pass@postgres/test_db"
    REDIS_URL: "redis://redis:6379"
  before_script:
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
  script:
    - pytest --cov=src --cov-report=xml --cov-report=term
  coverage: '/TOTAL.+?(\d+\%)/'
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test:security:
  stage: test
  image: python:3.9
  script:
    - pip install safety bandit
    - safety check
    - bandit -r src/
  allow_failure: true

# Build stage
build:image:
  stage: build
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $REGISTRY:$IMAGE_TAG .
    - docker push $REGISTRY:$IMAGE_TAG
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        docker tag $REGISTRY:$IMAGE_TAG $REGISTRY:latest
        docker push $REGISTRY:latest
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

# Deploy stage
.deploy:
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to $CI_ENVIRONMENT_NAME"
    - curl -X POST $DEPLOY_WEBHOOK_URL

deploy:staging:
  extends: .deploy
  stage: deploy
  environment:
    name: staging
    url: https://staging.example.com
    on_stop: stop:staging
  variables:
    DEPLOY_WEBHOOK_URL: $STAGING_WEBHOOK_URL
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_success

deploy:production:
  extends: .deploy
  stage: deploy
  environment:
    name: production
    url: https://api.example.com
    kubernetes:
      namespace: production
  variables:
    DEPLOY_WEBHOOK_URL: $PRODUCTION_WEBHOOK_URL
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: manual
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

stop:staging:
  extends: .deploy
  stage: deploy
  script:
    - echo "Stopping staging environment"
  environment:
    name: staging
    action: stop
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"